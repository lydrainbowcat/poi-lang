%header%
GRAMMARTYPE = "LL"

DESCRIPTION = "Poi Language Grammar"
CASESENSITIVE = "true"

AUTHOR = "Yuanhao Li <1300012754@pku.edu.cn>"
DATE = "09 October 2015"
VERSION = "1.0"

COPYRIGHT = ""


%tokens%

/* Primitive symbol */
SYMBOL_LEFT_PAREN       = "("
SYMBOL_RIGHT_PAREN      = ")"
SYMBOL_LEFT_BRACE       = "{"
SYMBOL_RIGHT_BRACE      = "}"
SYMBOL_LEFT_BRACKET     = "["
SYMBOL_RIGHT_BRACKET    = "]"
SYMBOL_QUESTION_MARK    = "?"
SYMBOL_COLON_MARK       = ":"
SYMBOL_SEMICOLON        = ";"
SYMBOL_COMMA            = ","
SYMBOL_DOT              = "."
SYMBOL_ARROW	        = "->"

/* Primitive operator */
OPERATOR_ASSIGN     		= "="
OPERATOR_ADD_ASSIGN 		= "+="
OPERATOR_SUB_ASSIGN			= "-="
OPERATOR_MUL_ASSIGN			= "*="
OPERATOR_DIV_ASSIGN			= "/="
OPERATOR_MOD_ASSIGN			= "%="
OPERATOR_SHIFT_LEFT_ASSIGN	= "<<="
OPERATOR_SHIFT_RIGHT_ASSIGN	= ">>="
OPERATOR_BIT_AND_ASSIGN		= "&="
OPERATOR_BIT_OR_ASSIGN		= "^="
OPERATOR_BIT_XOR_ASSIGN		= "|="

OPERATOR_ADD        = "+"
OPERATOR_SUB        = "-"
OPERATOR_MUL        = "*"
OPERATOR_DIV        = "/"
OPERATOR_MODULAR    = "%"

OPERATOR_LESS           = "<"
OPERATOR_GREATER        = ">"
OPERATOR_UNEQUAL        = "!="
OPERATOR_EQUAL          = "=="
OPERATOR_LESS_EQUAL     = "<="
OPERATOR_GREATER_EQUAL  = ">="

OPERATOR_LOGIC_AND  = "&&"
OPERATOR_LOGIC_OR   = "||"
OPERATOR_LOGIC_NOT  = "!"

OPERATOR_BIT_AND    = "&"
OPERATOR_BIT_OR     = "|"
OPERATOR_BIT_NOT    = "~"
OPERATOR_BIT_XOR    = "^"

OPERATOR_INC    = "++"
OPERATOR_DEC    = "--"

OPERATOR_SHIFT_LEFT     = "<<"
OPERATOR_SHIFT_RIGHT    = ">>"

OPERATOR_CAST   = "cast"

/* Primitive types */
PRIMITIVE_INTEGER8          = "int8"
PRIMITIVE_INTEGER8_ALIAS    = "byte"
PRIMITIVE_INTEGER16         = "int16"
PRIMITIVE_INTEGER16_ALIAS   = "short"
PRIMITIVE_INTEGER32         = "int32"
PRIMITIVE_INTEGER32_ALIAS   = "int"
PRIMITIVE_INTEGER64         = "int64"
PRIMITIVE_INTEGER64_ALIAS   = "long"

PRIMITIVE_UINTEGER8         = "uint8"
PRIMITIVE_UINTEGER8_ALIAS   = "ubyte"
PRIMITIVE_UINTEGER16        = "uint16"
PRIMITIVE_UINTEGER16_ALIAS  = "ushort"
PRIMITIVE_UINTEGER32        = "uint32"
PRIMITIVE_UINTEGER32_ALIAS  = "uint"
PRIMITIVE_UINTEGER64        = "uint64"
PRIMITIVE_UINTEGER64_ALIAS  = "ulong"

PRIMITIVE_SINGLE            = "single"
PRIMITIVE_SINGLE_ALIAS      = "float"
PRIMITIVE_DOUBLE            = "double"
PRIMITIVE_EXTENDED          = "extended"
PRIMITIVE_BOOLEAN           = "boolean"
PRIMITIVE_BOOLEAN_ALIAS     = "bool"
PRIMITIVE_CHARACTER         = "char"

/* Container type */
CONTAINER_STRING    = "string"
CONTAINER_ARRAY     = "array"
CONTAINER_MAP       = "map"
CONTAINER_EVENT     = "event"

/* Function */
FUNCTION_TYPE   = "function"
FUNCTION_SIGN   = "@"
FUNCTION_RETURN = "return"

/* Logic value */
LOGIC_TRUE  = "true"
LOGIC_FALSE = "false"

/* Declaration */
DECLARATION_GETTER  = "get"
DECLARATION_SETTER  = "set"
DECLARATION_ALLOC   = "new"

/* Class */
CLASS_TYPE      = "class"
CLASS_EXTEND    = "extends"
CLASS_PUBLIC    = "public"
CLASS_PRIVATE   = "private"
CLASS_PROTECTED = "protected"

/* Branch structure */
BRANCH_IF   = "if"
BRANCH_ELSE = "else"

/* Loop structure */
LOOP_FOR        = "for"
LOOP_INITIAL    = "init"
LOOP_WHILE      = "while"
LOOP_STEP       = "step"
LOOP_UNTIL      = "until"
LOOP_BREAK      = "break"
LOOP_CONTINUE   = "continue"

/* Literal
 * Type: Boolean, Numeric, String, etc.
 */
LITERAL_BOOLEAN_TRUE                = "true"
LITERAL_BOOLEAN_FALSE               = "false"
LITERAL_NUMERIC_INTEGER_DECIMAL      = <<-?0|([1-9][0-9]*)>>
LITERAL_NUMERIC_INTEGER_OCTAL        = <<-?0(0|[1-7][0-7]*)>>
LITERAL_NUMERIC_INTEGER_HEXADECIMAL  = <<-?0x[0-9a-fA-F]+>>
LITERAL_NUMERIC_REAL                 = <<-?(0|[1-9][0-9]*)\.[0-9]+>>
LITERAL_STRING                      = <<"[^"]*">>
LITERAL_CHARACTER                   = <<'[^']'>>

/* Identifier */
IDENTIFIER              = <<[a-zA-Z_][a-zA-Z0-9_]*>>

/* Functional token */
WHITESPACE          = <<[ \t\n\r]+>> %ignore%
SINGLE_LINE_COMMENT = <<//.*>> %ignore%
MULTI_LINE_COMMENT  = <</\*([^*]|\*+[^*/])*\*+/>> %ignore%
ERRORTOKEN          = <<.>> %error unexpected token%

%productions%

/* Note:
 * 1. Suffix for grammar target:
 *     none: <target>
 *     _T:   <target>'
 */
PoiSource = StatementList ;

/* Statement */
StatementList 	        = Statement+ ;
Statement		        = ExpressionStatement
                        | DeclarationStatement
                        | ReturnStatement
                        | StructualStatement
                        | EmptyStatement ;
ExpressionStatement     = Expression SYMBOL_SEMICOLON ;
DeclarationStatement    = Declaration SYMBOL_SEMICOLON ;
EmptyStatement          = SYMBOL_SEMICOLON ;

/* EXPRESSION */
Expression 		= AssignExpression
				| FunctionExpression ;

/* FunctionExpression */
FunctionExpression  = FUNCTION_SIGN FunctionParameter SYMBOL_ARROW FunctionReturnValue FunctionBody ;
FunctionParameter   = PairDeclaration ;
FunctionReturnValue = PairDeclaration ;
FunctionBody        = StatementBlock ;

/* StatementBlock */
StatementBlock = SYMBOL_LEFT_BRACE StatementList SYMBOL_RIGHT_BRACE ;

/* PairDeclaration */
PairDeclaration         = SYMBOL_LEFT_BRACKET [PairDeclarationContent] SYMBOL_RIGHT_BRACKET ;
PairDeclarationContent  = VariableDeclaration [SYMBOL_COMMA PairDeclarationContent] ;

/* AssignExpression
 * Operator: =, +=, -=, *=, %=, <<=, >>=, &=, |=, ^=
 * Priority: 14
 */
AssignExpression    = ArithmeticExpression [AssignExpression_T]
					| PairExpression [OPERATOR_ASSIGN PairOrFunctionExpression] ;
AssignExpression_T	= OPERATOR_ASSIGN AssignExpression
					| OPERATOR_ADD_ASSIGN AssignExpression
					| OPERATOR_SUB_ASSIGN AssignExpression
					| OPERATOR_MUL_ASSIGN AssignExpression
					| OPERATOR_DIV_ASSIGN AssignExpression
					| OPERATOR_MOD_ASSIGN AssignExpression
					| OPERATOR_SHIFT_LEFT_ASSIGN AssignExpression
					| OPERATOR_SHIFT_RIGHT_ASSIGN AssignExpression
					| OPERATOR_BIT_AND_ASSIGN AssignExpression
					| OPERATOR_BIT_OR_ASSIGN AssignExpression
					| OPERATOR_BIT_XOR_ASSIGN AssignExpression ;
PairOrFunctionExpression = PairExpression
						 | BasicExpression ;


/* PairExpression and PairDeclaration */
PairExpression          = SYMBOL_LEFT_BRACKET [PairExpressionContent] SYMBOL_RIGHT_BRACKET ;
PairExpressionContent   = ArithmeticExpression [SYMBOL_COMMA PairExpressionContent]
						| FunctionExpression [SYMBOL_COMMA PairExpressionContent] ;

/* ArithmeticExpression
 * Subexpression: Condition, Logical, Bit, Equality, Relational, Shift, Mathematic, Unary, etc.
 */
ArithmeticExpression = ConditionExpression ;

/* ConditionExpression
 * Operator: ?:
 * Priority: 13
 */
ConditionExpression 	= LogicalOrExpression [ConditionExpression_T] ;
ConditionExpression_T	= SYMBOL_QUESTION_MARK ConditionExpression SYMBOL_COLON_MARK ConditionExpression [ConditionExpression_T] ; 

/* LogicalOrExpression
 * Operator: ||
 * Priority: 12
 */
LogicalOrExpression    = LogicalAndExpression [LogicalOrExpression_T] ;
LogicalOrExpression_T  = OPERATOR_LOGIC_OR LogicalOrExpression ;

/* LogicalAndExpression
 * Operator: &&
 * Priority: 11
 */
LogicalAndExpression    = BitOrExpression [LogicalAndExpression_T] ;
LogicalAndExpression_T  = OPERATOR_LOGIC_AND LogicalAndExpression ;

/* BitOrExpression
 * Operator: |
 * Priority: 10
 */
BitOrExpression    = BitXorExpression [BitOrExpression_T] ;
BitOrExpression_T  = OPERATOR_BIT_OR BitOrExpression ;

/* BitXorExpression
 * Operator: ^
 * Priority: 9
 */
BitXorExpression    = BitAndExpression [BitXorExpression_T] ;
BitXorExpression_T  = OPERATOR_BIT_XOR BitXorExpression ;

/* BitAndExpression
 * Operator: &
 * Priority: 8
 */
BitAndExpression    = EqualityExpression [BitAndExpression_T] ;
BitAndExpression_T  = OPERATOR_BIT_AND BitAndExpression ;


/* EqualityExpression
 * Operator: ==, !=
 * Priority: 7
 */
EqualityExpression      = RelationalExpression [EqualityExpression_T] ;
EqualityExpression_T    = OPERATOR_UNEQUAL RelationalExpression
                        | OPERATOR_EQUAL RelationalExpression ;
                        
/* RelationalExpression
 * Operator: <, >, <=, >=
 * Priority: 6
 */
RelationalExpression    = ShiftExpression [RelationalExpression_T] ;
RelationalExpression_T  = OPERATOR_LESS ShiftExpression
                        | OPERATOR_GREATER ShiftExpression
                        | OPERATOR_LESS_EQUAL ShiftExpression
                        | OPERATOR_GREATER_EQUAL ShiftExpression ;

/* ShiftExpression
 * Operator: <<, >>
 * Priority: 5
 */
ShiftExpression     = AddSubExpression [ShiftExpression_T] ;
ShiftExpression_T   = OPERATOR_SHIFT_LEFT AddSubExpression
                    | OPERATOR_SHIFT_RIGHT AddSubExpression ;

/* AddSubExpression
 * Operator: +, -
 * Priority: 4
 */
AddSubExpression    = MulDivModExpression [AddSubExpression_T] ;
AddSubExpression_T  = OPERATOR_ADD AddSubExpression
                    | OPERATOR_SUB AddSubExpression ;

/* MulDivModExpression
 * Operator: *, /, %
 * Priority: 3
 */
MulDivModExpression     = UnaryExpression [MulDivModExpression_T] ;
MulDivModExpression_T   = OPERATOR_MUL MulDivModExpression
                        | OPERATOR_DIV MulDivModExpression
                        | OPERATOR_MODULAR MulDivModExpression ;

/* UnaryExpression
 * Operator: +, -, !, ~, ++, --, T()
 * Priority: 2
 */
UnaryExpression = BasicExpression
                | OPERATOR_ADD UnaryExpression
                | OPERATOR_SUB UnaryExpression
                | OPERATOR_LOGIC_NOT UnaryExpression
                | OPERATOR_BIT_NOT UnaryExpression
                | OPERATOR_INC UnaryExpression
                | OPERATOR_DEC UnaryExpression ;
                
/* BasicExpression
 * Operator: (), ., f(), a[], ++, --
 * Priority: 1
 */
BasicExpression     = PrimaryExpression [BasicExpression_T]
                    | SYMBOL_LEFT_PAREN Expression SYMBOL_RIGHT_PAREN [BasicExpression_T]
                    | FunctionVariable SYMBOL_LEFT_PAREN Expression SYMBOL_RIGHT_PAREN [BasicExpression_T]
                    | ArrayVariable (SYMBOL_LEFT_BRACKET Expression SYMBOL_RIGHT_BRACKET)+ [BasicExpression_T] ;
BasicExpression_T   = OPERATOR_INC [BasicExpression_T]
                    | OPERATOR_DEC [BasicExpression_T]
                    | SYMBOL_DOT BasicExpression [BasicExpression_T] ;
FunctionVariable    = IDENTIFIER
                    | PrimitiveType ; // The type cast function for primitive types
ArrayVariable       = IDENTIFIER ;
 
/* PrimaryExpression
 * Operator: none
 * Priority: 0
 */
PrimaryExpression   = Literal
                    | IDENTIFIER;
                    
/* Literal */
Literal = LITERAL_NUMERIC_INTEGER_DECIMAL
        | LITERAL_NUMERIC_INTEGER_OCTAL
        | LITERAL_NUMERIC_INTEGER_HEXADECIMAL
        | LITERAL_NUMERIC_REAL
        | LITERAL_STRING
        | LITERAL_CHARACTER ;

/* DECLARATION */
Declaration = VariableDeclaration
			| ClassDeclaration ;

/* VariableDeclaration */
VariableDeclaration		= VariableType IDENTIFIER [VariableAccess] [VariableInitializer] ;
VariableType			= PrimitiveType
                        | ContainerType
						| UserType ;
PrimitiveType			= PRIMITIVE_INTEGER8
						| PRIMITIVE_INTEGER8_ALIAS
						| PRIMITIVE_INTEGER16
						| PRIMITIVE_INTEGER16_ALIAS
						| PRIMITIVE_INTEGER32
						| PRIMITIVE_INTEGER32_ALIAS
						| PRIMITIVE_INTEGER64
						| PRIMITIVE_INTEGER64_ALIAS
						| PRIMITIVE_UINTEGER8
						| PRIMITIVE_UINTEGER8_ALIAS
						| PRIMITIVE_UINTEGER16
						| PRIMITIVE_UINTEGER16_ALIAS
						| PRIMITIVE_UINTEGER32
						| PRIMITIVE_UINTEGER32_ALIAS
						| PRIMITIVE_UINTEGER64
						| PRIMITIVE_UINTEGER64_ALIAS
						| PRIMITIVE_SINGLE
						| PRIMITIVE_SINGLE_ALIAS
						| PRIMITIVE_DOUBLE
						| PRIMITIVE_EXTENDED
						| PRIMITIVE_BOOLEAN
						| PRIMITIVE_BOOLEAN_ALIAS
						| PRIMITIVE_CHARACTER
						| FUNCTION_TYPE ;
ContainerType           = StringContainer
						| ArrayContainer
						| MapContainer
						| EventContainer ;
UserType				= IDENTIFIER ;
VariableAccess			= SYMBOL_COLON_MARK VariableGetterSetter ;
VariableGetterSetter 	= VariableGetter [SYMBOL_COMMA VariableSetter]
						| VariableSetter [SYMBOL_COMMA VariableGetter] ;
VariableGetter			= DECLARATION_GETTER [StatementBlock] ;
VariableSetter			= DECLARATION_SETTER [StatementBlock] ;
VariableInitializer		= OPERATOR_ASSIGN Expression ;

StringContainer = CONTAINER_STRING ;
ArrayContainer  = CONTAINER_ARRAY SYMBOL_LEFT_BRACKET VariableType (SYMBOL_COMMA Expression)+ SYMBOL_RIGHT_BRACKET ;
MapContainer    = CONTAINER_MAP ;
EventContainer  = CONTAINER_EVENT ;

/* ClassDeclaration */
ClassDeclaration    = CLASS_TYPE ClassName [CLASS_EXTEND SuperClassName] ClassBody ;
ClassName           = IDENTIFIER ;
SuperClassName      = IDENTIFIER ;
ClassBody           = SYMBOL_LEFT_BRACE {ClassContent} SYMBOL_RIGHT_BRACE ;
ClassContent        = ClassAccessModifier ClassVariable ;
ClassVariable       = DeclarationStatement ;
ClassAccessModifier = CLASS_PUBLIC
                    | CLASS_PRIVATE
                    | CLASS_PROTECTED ;

/* ReturnStatement */
ReturnStatement = FUNCTION_RETURN SYMBOL_SEMICOLON ;

/* StructualStatement */
StructualStatement  = BranchStatement
                    | LoopStatement ;

/* BranchStatement */
BranchStatement         = BRANCH_IF BranchCondition BranchTargetStatement [BRANCH_ELSE BranchTargetStatement] ;
BranchCondition         = SYMBOL_LEFT_PAREN Expression SYMBOL_RIGHT_PAREN ;
BranchTargetStatement   = Statement
                        | SYMBOL_LEFT_BRACE StatementList SYMBOL_RIGHT_BRACE ;
                        
/* LoopStatement */
LoopStatement       = LOOP_FOR
                    [LOOP_INITIAL LoopInitStatement]
					[LOOP_WHILE LoopStartCondition]
                    [LOOP_STEP LoopStepStatement]
                    LoopTargetStatement
                    [LOOP_UNTIL LoopStopCondition SYMBOL_SEMICOLON] ;
LoopStartCondition  = SYMBOL_LEFT_PAREN [Expression] SYMBOL_RIGHT_PAREN ;
LoopInitStatement   = SYMBOL_LEFT_PAREN StatementList SYMBOL_RIGHT_PAREN ;
LoopStepStatement   = SYMBOL_LEFT_PAREN StatementList SYMBOL_RIGHT_PAREN ;
LoopTargetStatement = Statement
                    | SYMBOL_LEFT_BRACE StatementList SYMBOL_RIGHT_BRACE ;
LoopStopCondition   = SYMBOL_LEFT_PAREN Expression SYMBOL_RIGHT_PAREN ;